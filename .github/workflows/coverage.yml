name: Code Coverage

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: proxyfield_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgresql://postgres:password@localhost:5432/proxyfield_test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.5'
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install JavaScript dependencies
      run: npm install

    - name: Create database
      run: |
        bundle exec rails db:environment:set RAILS_ENV=test
        bundle exec rails db:create db:migrate

    - name: Run tests with coverage
      run: bundle exec rspec --format documentation --color

    - name: Check coverage threshold
      run: |
        ruby -e "
        require 'json'
        if File.exist?('coverage/.resultset.json')
          coverage_data = JSON.parse(File.read('coverage/.resultset.json'))
          if coverage_data && coverage_data['RSpec']
            covered = coverage_data['RSpec']['coverage'].values.flatten.count { |x| x && x > 0 }
            total = coverage_data['RSpec']['coverage'].values.flatten.count { |x| x != nil }
            percentage = (covered.to_f / total * 100).round(2)
            puts \"Coverage: #{percentage}%\"
            if percentage < 70
              puts \"ERROR: Coverage #{percentage}% is below minimum requirement of 70%\"
              exit 1
            else
              puts \"SUCCESS: Coverage #{percentage}% meets requirement\"
            end
          end
        else
          puts 'No coverage data found'
          exit 1
        end
        "

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage/coverage.xml
        fail_ci_if_error: true
