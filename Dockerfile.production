FROM ruby:3.4.5-bookworm AS builder

# Establece variables de entorno para producción
ENV RAILS_ENV=production \
    NODE_ENV=production \
    BUNDLE_PATH="/app/.bundle_cache" \
    BUNDLE_WITHOUT="development test"

# Instala Node.js 22.x (LTS) y dependencias de build
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get update -qq && \
    apt-get install -y --no-install-recommends \
      build-essential \
      libpq-dev \
      nodejs \
      git

WORKDIR /app

# Instala dependencias de Ruby (aprovechando el caché de Docker)
COPY Gemfile Gemfile.lock ./
RUN bundle install --jobs $(nproc) --retry 3 && \
    rm -rf /app/.bundle_cache/ruby/*/cache/*.gem && \
    find /app/.bundle_cache/ruby/*/gems/ -name "*.c" -delete && \
    find /app/.bundle_cache/ruby/*/gems/ -name "*.o" -delete

# Instala dependencias de Javascript (si usas package.json)
# Descomenta las siguientes líneas si tienes un package.json
# COPY package.json package-lock.json ./
# RUN npm install

# Copia el resto del código de la aplicación
COPY . .

# Precompila los assets.
# SECRET_KEY_BASE_DUMMY es necesario para que el comando no falle si usas credenciales.
RUN SECRET_KEY_BASE_DUMMY=1 bundle exec rails assets:precompile

# ===================================================================
# Stage 2: Production
# Esta es la imagen final, ligera y optimizada.
# ===================================================================
FROM ruby:3.4.5-slim-bookworm AS production

# Establece variables de entorno para producción
ENV RAILS_ENV=production \
    NODE_ENV=production

# Instala solo las dependencias de RUNTIME necesarias
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
      postgresql-client \
      libpq5 \
      netcat-openbsd \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Crea un usuario no-root para correr la aplicación
RUN useradd --create-home --shell /bin/bash rails

WORKDIR /app

# Copia los artefactos desde la etapa 'builder'
COPY --from=builder --chown=rails:rails /app/.bundle_cache /app/.bundle_cache
COPY --from=builder --chown=rails:rails /app/public /app/public
COPY --from=builder --chown=rails:rails /app/config /app/config
COPY --from=builder --chown=rails:rails /app/app /app/app
COPY --from=builder --chown=rails:rails /app/lib /app/lib
COPY --from=builder --chown=rails:rails /app/db/migrate /app/db/migrate
COPY --from=builder --chown=rails:rails /app/bin /app/bin
COPY --from=builder --chown=rails:rails /app/Rakefile /app/Rakefile
COPY --from=builder --chown=rails:rails /app/Gemfile /app/Gemfile
COPY --from=builder --chown=rails:rails /app/Gemfile.lock /app/Gemfile.lock

# Copia el entrypoint y dale permisos
COPY --chown=rails:rails entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh

# Cambia al usuario no-root
USER rails

# Expone el puerto de la aplicación
EXPOSE 3000

# Define el entrypoint
ENTRYPOINT ["entrypoint.sh"]

# El comando por defecto para iniciar el servidor de Rails
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]